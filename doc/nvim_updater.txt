*nvim-updater.txt*   Neovim Updater Plugin Documentation
*nvim_updater* *neovim-updater* *neovim_updater*

==============================================================================
Neovim Updater Plugin                                           *nvim-updater*

Author: rootiest <github.com/rootiest>
Version: 1.0
License: MIT

==============================================================================
CONTENTS                                               *nvim-updater-contents*
|nvim-updater-intro|            Introduction
|nvim-updater-installation|     Installation
|nvim-updater-commands|         Commands
|nvim-updater-lua-funcs|        Lua Functions
|nvim-updater-keymaps|          Keymaps
|nvim-updater-config|           Configuration
|nvim-updater-filetype|         filetype integration
|nvim-updater-compatibility|    Compatibility
|nvim-updater-contributions|    Contributions
|nvim-updater-license|          License

==============================================================================
Introduction                                           *nvim-updater-intro*

The nvim-updater plugin allows you to manage and update Neovim from the
source code. It provides customizable options for the source directory, build
type, branch, and user-defined keymaps for convenience.

==============================================================================
Installation                                    *nvim-updater-installation*

Example setup using lazy.nvim:

>lua
  require("lazy").setup({
    "rootiest/nvim-updater.nvim",
    config = function()
      require("nvim-updater").setup({
        source_dir = "~/.local/src/neovim", -- Custom target directory
        build_type = "RelWithDebInfo", -- Set the desired build type
      })
    end,

    keys = {
      {
        "<Leader>cuU",
        ":UpdateNeovim<CR>",
        desc = "Custom Update Neovim",
      },
      {
        "<Leader>cuD",
        function()
          require("nvim-updater").update_neovim({ build_type = "Debug" })
        end,
        desc = "Debug Build Neovim",
      },
      {
        "<Leader>cRN",
        ":RemoveNeovimSource<CR>",
        desc = "Remove Neovim Source Directory",
      },
    },
  })
<

==============================================================================
Commands                                            *nvim-updater-commands*

Available commands:

|:UpdateNeovim|    - Updates Neovim from source using current configuration.
                    If this is the first time using it, it will clone the
                    repository, otherwise, it will pull the latest changes then
                    build it using the defined build type.

Example usage:
>vim
  :UpdateNeovim
<

|:RemoveNeovimSource| - Removes the source directory.
                       This allows you to clear out the source directory
                       after updating Neovim.
                       
Example usage:
>vim
  :RemoveNeovimSource
<

==============================================================================
Lua Functions                                      *nvim-updater-lua-funcs*

The plugin exposes several Lua functions.

The following functions are available in the `nvim_updater` namespace:

--- Update Neovim from source ---
>lua
  require("nvim_updater").update_neovim(options)
<
Available options:
- `source_dir`: Path to where the Neovim source is cloned. Default is `~/.local/src/neovim`.
- `build_type`: The build type to use, e.g.,
  `Release`, `Debug`, or `RelWithDebInfo`. Default is `RelWithDebInfo`.
- `branch`: The branch to track when cloning Neovim. Default is `master`.

--- Remove Neovim source ---
>lua
  require("nvim_updater").remove_neovim_source(options)
<
Available options:
- `source_dir`: Path to where the Neovim source is cloned. Default is `~/.local/src/neovim`.

--- Open floating terminal ---
>lua
  require("nvim_updater").open_floating_terminal(options)
<
This is a helper function for opening a floating terminal that is used by the
updater to display the terminal output.

Available options:
- `cmd`: Command to run in the terminal.
- `filetype`: Filetype to assign to the terminal buffer.

==============================================================================
Keymaps                                              *nvim-updater-keymaps*

Default key mappings:

- `<Leader>uU`: Update Neovim (default build type `RelWithDebInfo`).
- `<Leader>uD`: Update Neovim with `Debug` build type.
- `<Leader>uR`: Update Neovim with `Release` build type.

Users may define custom key mappings via the setup function.
If `keys` is set to `nil`, the default keymaps are enabled.

==============================================================================
Configuration                                         *nvim-updater-config*

The plugin's setup function accepts an optional configuration table.
Available configuration fields:

- source_dir  (string) - Path where Neovim will be cloned or updated. 
                         Default: `~/.local/src/neovim`

- build_type  (string) - Specify the CMake build type, e.g., `Release`, 
                         `Debug`, or `RelWithDebInfo`. 
                         Default: `RelWithDebInfo`.

- branch      (string) - Git branch to track for updates.
                         Default: `master`

- keys        (table or nil) - Optional key mappings. If `nil`, 
                               default keymaps will be set.

Example setup with custom settings:

>lua
  require("nvim-updater").setup({
    source_dir = "~/projects/neovim",  -- Custom source directory
    build_type = "Release",            -- Use Release mode
    branch = "stable",                 -- Track stable branch
  })
<

==============================================================================
Filetype integration                                *nvim-updater-filetype*

The terminal buffer created for updating Neovim uses a custom filetype 
called `neovim_updater_term`.

This allows you to perform conditional customizations with your statusline 
(e.g., hiding or showing certain statusline components) or for plugins 
dependent on filetypes.

Example lualine configuration to hide filename when using the updater term:

>lua
  require("lualine").setup {
    sections = {
      lualine_a = { "mode" },
      lualine_b = { "branch" },
      lualine_c = {
        { -- Hide filename when using the updater
          "filename",
          cond = function()
            return vim.bo.filetype ~= "neovim_updater_term"
          end,
        },
        { -- Neovim Updater
          function()
            return "Neovim Updating.."
          end,
          icon = "󰅢 ",
          -- Use the lualine_a highlight for emphasis
          color = "lualine_a_terminal",
          -- Use bubble separators
          separator = { left = "", right = "" },
          -- Show only when using the updater
          cond = function()
            return vim.bo.filetype == "neovim_updater_term"
          end,
        },
    },
    -- Other lualine components
  }
<

This configuration hides the file name in lualine when the 
`neovim_updater_term` filetype is detected and shows the 
`Neovim Updating` component instead.

In this way we can avoid a messy "filename" being displayed 
when using the updater and instead display a customized 
"Neovim Updating" message.

The condition can also be applied to any other components you 
wish to hide when using the updater.

==============================================================================
Compatibility                                  *nvim-updater-compatibility*

--- Platform ---
This plugin has been tested and configured primarily for Linux.
  It may also work on macOS or other platforms, but assumes Linux-based 
  functionality with hardcoded calls like `sudo make install`.

--- Neovim Version ---
The plugin requires **Neovim 0.10+** due to its reliance 
  on newer APIs (such as `nvim_set_option_value` which replaces deprecated 
  API calls). Ensure you're running a compatible version for optimal 
  functionality.

==============================================================================
Contributing                                   *nvim-updater-contributions*

Contributions and suggestions are welcome! 

Feel free to open GitHub issues with 
feature requests, bug reports, or pull requests.

--- Filing an Issue ---
Provide the following details:
1. Neovim version (`nvim --version`).
2. Exact error messages or logs.
3. Steps to reproduce, if applicable.

--- Submitting a Pull Request ---
1. Fork the repository.
2. Create a new branch for your updates.
3. Add new functionality or fix bugs and ensure tests (if any) pass.
4. Open a pull request on GitHub describing your changes.

==============================================================================
License                                              *nvim-updater-license*

This plugin is licensed under the MIT License. See the complete terms in 
the LICENSE file included with this repository.

==============================================================================
 vim:tw=80:ts=2:et:ft=help:norl:
