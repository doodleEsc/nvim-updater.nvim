*nvim-updater.txt*   Neovim Updater Plugin Documentation
*nvim_updater* *neovim-updater* *neovim_updater*

==============================================================================
Neovim Updater Plugin                                           *nvim-updater*

Author: Chris Laprade <github.com/rootiest>
Version: 1.0
License: MIT

==============================================================================
CONTENTS                                               *nvim-updater-contents*
|nvim-updater-intro|            Introduction
|nvim-updater-prereqs|          Prerequisites
|nvim-updater-installation|     Installation
|nvim-updater-commands|         Commands
|nvim-updater-lua-funcs|        Lua Functions
|nvim-updater-keymaps|          Keymaps
|nvim-updater-config|           Configuration
|nvim-updater-integrations|     Integrations
|nvim-updater-external|         External Use
|nvim-updater-compatibility|    Compatibility
|nvim-updater-contributions|    Contributions
|nvim-updater-license|          License

==============================================================================
Introduction                                           *nvim-updater-intro*

The nvim-updater plugin allows you to manage and update Neovim from the
source code. It provides customizable options for the source directory, build
type, branch, and user-defined keymaps for convenience.

==============================================================================
Prerequisites                                        *nvim-updater-prereqs*

- A Linux system (macOS and Windows are not supported by this plugin)

- Neovim 0.9+ (earlier versions may work, but could encounter issues)
  https://neovim.io/

- Build prerequisites for your platform:
  https://github.com/neovim/neovim/blob/master/BUILD.md#build-prerequisites

                         --- IMPORTANT ---
It is recommended to uninstall any distro-provided neovim packages after
installing from source (with this plugin or manually) to prevent those
distro-packaged updates from overwriting the locally-built neovim binary.


                    --- Optional Dependencies ---

These plugins are not required but can be used to extend functionality:

- [diffview.nvim](https://github.com/sindrets/diffview.nvim)
  This plugin can be used to show new commits in DiffView.
- [telescope.nvim](https://github.com/nvim-telescope/telescope.nvim)
  This plugin can be used to show new commits in Telescope.

==============================================================================
Installation                                    *nvim-updater-installation*

Example setup using lazy.nvim 󱞣
>lua
  require("lazy").setup({
    "rootiest/nvim-updater.nvim",
    config = function()
      require("nvim_updater").setup({
        source_dir = "~/.local/src/neovim",  -- Custom target directory
        build_type = "RelWithDebInfo",       -- Set the desired build type
        branch = "master",                   -- Track nightly branch
        check_for_updates = true,            -- Enable automatic update checks
        default_keymaps = false,             -- Disable default keymaps
      })
    end,
    keys = { -- Custom keymappings
      {
        "<Leader>cuU",
        ":NVUpdateNeovim<CR>",
        desc = "Custom Update Neovim",
      },
      {
        "<Leader>cuD",
        function()
          require("nvim-updater").update_neovim({ build_type = "Debug" })
        end,
        desc = "Debug Build Neovim",
      },
      { -- Remove Neovim Source
        "<Leader>cRN",
        ":NVUpdateRemoveSource<CR>",
        desc = "Remove Neovim Source Directory",
      },
    },
  })
<

Minimal example with defaults 󱞣
>lua
  {
    "rootiest/nvim-updater.nvim",
    opts = {},
  }
<

Example with packer.nvim 󱞣
>lua
 use {
   "rootiest/nvim-updater.nvim",
   config = function()
     require("nvim_updater").setup({
       source_dir = "~/.local/src/neovim",  -- Custom target directory
       build_type = "RelWithDebInfo",       -- Set the desired build type
       branch = "master",                   -- Track nightly branch
       check_for_updates = true,            -- Enable automatic update checks
       default_keymaps = false,             -- Disable default keymaps
     })
   end,
   keys = { -- Custom keymappings
     { -- Custom Update Neovim
       "<Leader>cuU",
       function()
         require('nvim_updater').update_neovim()
       end,
       desc = "Custom Update Neovim"
     },
     { -- Debug Build Neovim
       "<Leader>cuD",
       function()
         require('nvim_updater').update_neovim({ build_type = 'Debug' })
       end,
       desc = "Debug Build Neovim"
     },
     { -- Remove Neovim Source
       "<Leader>cRN",
       ":NVUpdateRemoveSource<CR>",
       desc = "Remove Neovim Source Directory",
     },
   }
 }
<

Example with vim-plug 󱞣
>lua
 Plug "rootiest/nvim-updater.nvim"

 lua << EOF
 require("nvim_updater").setup({
   source_dir = "~/.local/src/neovim",  -- Custom target directory
   build_type = "RelWithDebInfo",       -- Set the desired build type
   branch = "master",                   -- Track nightly branch
   check_for_updates = true,            -- Enable automatic update checks
   default_keymaps = false,             -- Disable default keymaps
 })

 -- Custom keybindings
 vim.api.nvim_set_keymap("n", "<Leader>cuU",
   ":lua require('nvim_updater').update_neovim()<CR>",
   { noremap = true, silent = true, desc = "Custom Update Neovim" })

 vim.api.nvim_set_keymap("n", "<Leader>cuD",
   ":lua require('nvim_updater').update_neovim({ build_type = 'Debug' })<CR>",
   { noremap = true, silent = true, desc = "Debug Build Neovim" })

 vim.api.nvim_set_keymap("n", "<Leader>cRN",
   ":NVUpdateRemoveSource<CR>",
   { noremap = true, silent = true, desc = "Remove Neovim Source Directory" })
 EOF
<
==============================================================================
Commands                                            *nvim-updater-commands*

Available commands:

|:NVUpdateNeovim|    - Updates Neovim from source using current configuration.
                       If this is the first time using it, it will clone the
                       repository, otherwise, it will pull the latest changes
                       then build it using the defined build type.

Example usage:
>vim
  :NVUpdateNeovim
<

|:NVUpdateRemoveSource| - Removes the source directory.
                          This allows you to clear out the source directory
                          after updating Neovim.

Example usage:
>vim
 :NVUpdateRemoveSource
<

|:NVUpdateShowNewCommits| - Shows new updates available.
                            This command allows you to check for new updates
                            and show the changes in a floating terminal.

Example usage:
>vim
 :NVUpdateShowNewCommits
<

|:NVUpdateShowNewCommitsInDiffView| - Shows new updates available in
                                      the DiffView plugin.

Example usage:
>vim
 :NVUpdateShowNewCommitsInDiffView
<

|:NVUpdateShowNewCommitsInTelescope| - Shows new updates available in
                                       the Telescope plugin.

Example usage:
>vim
 :NVUpdateShowNewCommitsInTelescope
<
==============================================================================
Lua Functions                                      *nvim-updater-lua-funcs*

The plugin exposes several Lua functions.

The following functions are available in the `nvim_updater` namespace:

*IMPORTANT*:
  The defaults shown below are for the default configuration.
  If options aren't provided to the function, the values from
  the plugin configuration will be used.a

--- Update Neovim from source ---
>lua
 require("nvim_updater").update_neovim( [options] )
<
Available `[options]`:
- `source_dir`  ->  Path to where the Neovim source is cloned.
                    Default is `~/.local/src/neovim`.
- `build_type`  ->  The build type to use.
                    Options are `Release`, `Debug`, or `RelWithDebInfo`.
                    Default is `RelWithDebInfo`.
- `branch`      ->  The branch to track when cloning Neovim.
                    Default is `master`.

--- Remove Neovim source ---
>lua
 require("nvim_updater").remove_source_dir( [options] )
<
Available `[options]`:
- `source_dir`  ->  Path to where the Neovim source is cloned.
                    Default is `~/.local/src/neovim`.

--- Clone Neovim source ---
>lua
 require("nvim_updater").generate_source_dir( [options] )
<
Available `[options]`:
- `source_dir`  ->  Path to where the Neovim source is to be cloned.
                    Default is `~/.local/src/neovim`.
- `branch`      ->  The branch to track when cloning Neovim.
                    Default is `master`.

--- Show new commits ---
>lua
 require("nvim_updater.utils").show_new_commits( [options] )
<
This function opens a floating terminal with the new commits/changes on
the remote repository vs the local src directory.

Available `[options]`:
- `isupdate`  ->  Whether to prompt for updating after showing the changes.
                  Default is `false`

--- Show new commits in DiffView ---
>lua
 require("nvim_updater.utils").show_new_commits_in_diffview()
<
This function opens DiffView with the new commits/changes on
the remote repository vs the local src directory.

--- Show new commits in Telescope ---
>lua
 require("nvim_updater.utils").show_new_commits_in_telescope()
<
This function opens Telescope with the new commits/changes on
the remote repository vs the local src directory.

--- Open floating terminal ---
>lua
 require("nvim_updater.utils").open_floating_terminal( [options] )
<
This is a helper function for opening a floating terminal that is used by the
updater to display the terminal output.

Available `[options]`:
- `cmd`       ->  Command to run in the terminal.
- `filetype`  ->  Filetype to assign to the terminal buffer.

--- Setup ---
>lua
 require("nvim_updater").setup( [options] )
<
See |nvim-updater-config| for setup `[options]`.

==============================================================================
Keymaps                                              *nvim-updater-keymaps*

Default key mappings:

- `<Leader>uU` -> Update Neovim (default build type `RelWithDebInfo`).
- `<Leader>uD` -> Update Neovim with `Debug` build type.
- `<Leader>uR` -> Update Neovim with `Release` build type.

Users may define custom key mappings via the setup function.
If `keys` is set to `nil`, the default keymaps are enabled.

==============================================================================
Configuration                                         *nvim-updater-config*

The plugin's setup function accepts an optional configuration table.
Available configuration fields:


- `source_dir`: (string) -> Path to where the Neovim source is cloned.
                       Default is `vim.fn.expand("~/.local/src/neovim")`.
                       The source directory path can be any
                        valid path Neovim can write to.

- `build_type`: (string) -> The build type to use.
                       Default is `"RelWithDebInfo"`.
                       Opts: `"Release"` - No debugging symbols.
                           `"Debug"` - All debugging symbols.
                           `"RelWithDebInfo"` - Only common debugging symbols.

- `branch`: (string) -> The branch to track when cloning Neovim.
                       Default: `"master"` (nightly)
                       The branch can be used to track the Neovim version.
                       Opts: `"release-0.10"` (Neovim 0.10)
                           `"release-0.9"`  (Neovim 0.9)

- `verbose`: (boolean) -> Enable verbose output.
                       Default is `false`.
                       When set to `false`, `INFO` and `DEBUG`
                        notifications from the plugin are suppressed.
                       Opts: `true` - Enable verbose output
                           `false` - Disable verbose output.

- `check_for_updates`: (boolean) -> Enable automatic update checks.
                       Default is `false`.
                       When set to `false`, the plugin will not
                        check for updates automatically.
                       Opts: `true` - Enable automatic update checks.
                           `false` - Disable automatic update checks.

- `update_interval`: (number) -> Update interval in seconds.
                       Default is `(60 * 60 * 6)` (6 hours).
                       The update interval is the time between checks
                        for new commits in the neovim source repository.
                       Opts: `number` - Update interval in seconds.

- `default_keymaps`: (boolean) -> Enable default keymaps.
                       Default is `false`.
                       When set to `true`, the plugin provides
                        a set of default keymaps.
                       Opts: `true` - Enable default keymaps.
                             `false` - Disable default keymaps.

Default settings 󱞣
>lua
 require("nvim_updater").setup({
   source_dir = "~/.local/src/neovim",  -- Default source directory
   build_type = "RelWithDebInfo",       -- Default build mode
   branch = "master",                   -- Represents "nightly"
   check_for_updates = false,           -- Disable automatic update checks
   update_interval = (60 * 60) * 6,     -- 6 hours default update interval
   verbose = false,                     -- Disable verbose output
   default_keymaps = false,              -- Disable default keymaps
 })
<
==============================================================================
Integrations                                      *nvim-updater-integrations*

-------------------------- Filetype Integration --------------------------
The terminal buffer created for updating Neovim uses a custom filetype 
called `neovim_updater_term`.

This allows you to perform conditional customizations with your statusline 
(e.g., hiding or showing certain statusline components) or for plugins 
dependent on filetypes.

Example lualine configuration 󱞣
>lua
 require("lualine").setup {
   sections = {
     lualine_a = { "mode" },
     lualine_b = { "branch" },
     lualine_c = {
       { -- Hide filename when using the updater
         "filename",
        cond = function()
          return not string.find(vim.bo.filetype, "neovim_updater_term")
        end,
      },
      { -- Neovim Updater
        function()
          local ft = vim.bo.filetype
          if ft == "neovim_updater_term.updating" then
            return "Neovim Updating.."
          elseif ft == "neovim_updater_term.cloning" then
            return "Neovim Source Cloning.."
          elseif ft == "neovim_updater_term.changes" then
            return "Neovim Source Changelog"
          end
        end,
        icon = "󰅢 ",
        color = "lualine_a_terminal",
        separator = { left = "", right = "" },
        padding = { left = 0, right = 0 },
        cond = function()
          return string.find(vim.bo.filetype, "neovim_updater_term") ~= nil
        end,
      },
   },
   -- Other lualine components
 }
<
This configuration hides the file name in lualine when
the `neovim_updater_term` root filetype is detected and
shows the `nvim-updater` component instead.

In this way we can avoid a messy "filename" being displayed
when using the updater and instead display a customized
"Neovim Updating" message.

The condition can also be applied to any other components you
wish to hide when using the updater.

We can also take advantage of the "sub-filetype" to determine
the mode of the updater plugin.

The plugin exposes the following sub-filetypes:
  - `neovim_updater_term.updating` -> Neovim is updating
  - `neovim_updater_term.changes`  -> Showing Neovim source changes
  - `neovim_updater_term.cloning`  -> Neovim source directory is cloning

------------------------- Statusline Integration -------------------------

The plugin exposes a function `nvim_updater.get_statusline()`

This function returns a table of values that can be used to
populate your statusline component.

The table is NOT updated when the function is called.
This prevents blocking or caching from negatively impacting
your status component.

Instead, set the `check_for_updates` option to `true` and configure a
`update_interval` in the plugin setup options. The plugin will then
periodically check for updates and update the statusline component
automatically at that interval.

Alternatively, set `check_for_updates` to `false` and manually
call `nvim_updater.utils.get_commit_count()` when you'd like to
refresh the updates.

Here is an example adding a component to the lualine statusline:
>lua
 require("lualine").setup {
   sections = {
     lualine_x = {
       { -- Neovim Updater Status
         function()
           return require("nvim_updater").get_statusline().icon_text
         end,
         color = function()
           return require("nvim_updater").get_statusline().color
         end,
         on_click = function()
           require("nvim_updater").show_new_commits(true)
         end,
       },
     },
   },
 }
<
The `get_statusline()` function provides the following values:
  - `count`      -> The number of new commits
  - `text`       -> The text of the status
  - `icon`       -> An icon representing the update status
  - `icon_text`  -> The icon and text of the status
  - `icon_count` -> The icon and count of the status
  - `color`      -> A highlight group representing the update status

--------------------------- Diff Integrations ----------------------------

The plugin exposes a couple additional functions that provide better
integration with other plugins.

                       --- DiffView Integration ---

The plugin exposes a function `nvim_updater.show_new_commits_in_diffview()`

This function opens the changelog in the DiffView plugin.

If the plugin is not installed/available, the function will produce an error
notification and then fallback to opening the changelog in a floating terminal.

                       --- Telescope Integration ---

The plugin exposes a function `nvim_updater.show_new_commits_in_telescope()`

This function opens the changelog in the Telescope plugin.

If the plugin is not installed/available, the function will produce an error
notification and then fallback to opening the changelog in a floating terminal.


==============================================================================
External Use                                      *nvim-updater-external*

You can also use this plugin to update Neovim directly from
the command line or from the desktop.

This is achieved by the use of an environment variable.

The `NVIMUPDATER_HEADLESS` environment variable can be set
to enable headless mode. In this mode, Neovim will be exited
immediately after the update completes.

*WARNING*:
  Lazy-loading the plugin may prevent headless operation
  from functioning properly.

If you receive an error with external calls:
>vim
 E492: Not an editor command: NVUpdateNeovim
<
 This generally indicates the plugin was not loaded at startup.

--- Command Line ---

After installing the plugin, you can run the following command:
>sh
 NVIMUPDATER_HEADLESS=1 nvim "+NVUpdateNeovim"
<

This command will open Neovim directly to the updater.

- If the update completes successfully, Neovim will be closed.
- If the update fails, the window will be kept open.

You can also alias this command to a shortcut like `nvimup`:

`bash/zsh` 󱞣
>bash
 alias nvimup='NVIMUPDATER_HEADLESS=1 nvim "+NVUpdateNeovim"'
<

`fish` 󱞣
>fish
 alias --save nvimup='NVIMUPDATER_HEADLESS=1 nvim "+NVUpdateNeovim"'
<

This will allow you to simply run `nvimup` from anywhere in your terminal.

--- Desktop Shortcut ---

You can also create a desktop shortcut for this command like so:

`nvimup.desktop` 󱞣
>desktop
 [Desktop Entry]
 Name=Neovim Updater
 Exec=env NVIMUPDATER_HEADLESS=1 nvim "+NVUpdateNeovim"
 Terminal=true
 Type=Application
 Icon=nvim
<

Place this file in your `~/.local/share/applications` directory.

You will then have a shortcut available in your system's application menu
for updating Neovim called `Neovim Updater`. This shortcut will open the
updater in your default terminal emulator.

To use a specific terminal emulator instead of the default,
you can modify the desktop file like so:

`kitty-nvimup.desktop` 󱞣
>desktop
 [Desktop Entry]
 Name=Neovim Updater (kitty)
 Exec=env NVIMUPDATER_HEADLESS=1 kitty nvim "+NVUpdateNeovim"
 Terminal=false
 Type=Application
 Icon=nvim
<
This example uses the `kitty` terminal emulator.
You can substitute `kitty` with any terminal emulator of your choice.

==============================================================================
Compatibility                                  *nvim-updater-compatibility*

--- Platform ---
This plugin has been tested and configured primarily for Linux.
  It may also work on macOS or other platforms, but assumes Linux-based
  functionality with hardcoded calls like `sudo make install`.

--- Neovim Version ---
The plugin requires Neovim 0.9+
  Ensure you're running a compatible version
  for optimal functionality.

==============================================================================
Contributing                                   *nvim-updater-contributions*

Contributions and suggestions are welcome! 

Feel free to open GitHub issues with 
feature requests, bug reports, or pull requests.

--- Filing an Issue ---
Provide the following details:
1. Neovim version (`nvim --version`).
2. Exact error messages or logs.
3. Steps to reproduce, if applicable.

--- Submitting a Pull Request ---
1. Fork the repository.
2. Create a new branch for your updates.
3. Add new functionality or fix bugs and ensure tests (if any) pass.
4. Open a pull request on GitHub describing your changes.

==============================================================================
License                                              *nvim-updater-license*

This plugin is licensed under the MIT License. See the complete terms in 
the LICENSE file included with this repository.

==============================================================================
 vim:tw=80:ts=2:et:ft=help:norl:
